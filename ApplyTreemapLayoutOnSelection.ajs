// This applies a treemap layout on an object and its children recursively

// This is an improvement of an existing script: See https://github.com/archi-contribs/jarchi-community-script-pack/blob/main/Layout/Apply%20treemap%20layout%20on%20selected%20views%20or%20elements.ajs
// I applied most of the code from another script in order to replace multiple popup windows by a single dialog: See https://gist.github.com/rchevallier/d155527dcc3e956848a90e51bf21d7e1

//@ts-check
/**
 * Test of a dialog box in jarchi, SWT style
 */

load(__DIR__ + "lib/treemap.lib.js");
/**
 * @typedef {any} JavaClass
 * @typedef {Object<string, function>} JavaObject
 */
"use strict"

if (typeof Java == null) {
    /**
     * @type {{type: (s: string) => JavaClass, extend: (c: JavaClass) => JavaClass, super: (o: JavaObject) => JavaObject }}
     */
    var Java
    var shell
}


/** @type JavaClass */ const SWT = Java.type('org.eclipse.swt.SWT')
/** @type JavaClass */ const LabelWidget = Java.type('org.eclipse.swt.widgets.Label')
/** @type JavaClass */ const CompositeWidget = Java.type('org.eclipse.swt.widgets.Composite')
/** @type JavaClass */ const SpinnerWidget = Java.type('org.eclipse.swt.widgets.Spinner')
/** @type JavaClass */ const GroupWidget = Java.type('org.eclipse.swt.widgets.Group')
/** @type JavaClass */ const ButtonWidget = Java.type('org.eclipse.swt.widgets.Button')
/** @type JavaClass */ const GridData = Java.type('org.eclipse.swt.layout.GridData')
/** @type JavaClass */ const GridLayout = Java.type('org.eclipse.swt.layout.GridLayout')
/** @type JavaClass */ const GridDataFactory = Java.type('org.eclipse.jface.layout.GridDataFactory')
/** @type JavaClass */ const GridLayoutFactory = Java.type('org.eclipse.jface.layout.GridLayoutFactory')
/** @type JavaClass */ const RowLayoutFactory = Java.type('org.eclipse.jface.layout.RowLayoutFactory')
/** @type JavaClass */ const RowLayout = Java.type('org.eclipse.swt.layout.RowLayout')
/** @type JavaClass */ const IMessageProvider = Java.type('org.eclipse.jface.dialogs.IMessageProvider')
/** @type JavaClass */ const TitleAreaDialog = Java.type("org.eclipse.jface.dialogs.TitleAreaDialog")

const ConfigDialog = Java.extend(TitleAreaDialog)

let cfgDialog = {

    /**
     * Default values
     */
    config: {
        topPadding: 30,
        internalPadding: 10,
        layoutValues: ["auto", "col", "row"],
        layoutValue: "auto"
    },

    // widgets memorized to get value from before closing
    widgets: {},

    /**
     * Helper to create a widget
     *
     * @param {string} name - The widget name
     * @param {JavaClass} widgetClass - the Java widget class
     * @param {JavaObject} c - The container
     * @param {string} label - the label if any for the widget. A Label widget will be created if necessary
     * @param {(...a: any) => void} init - a function to finalize initialisation (value, etc )
     */
    createWidget: function (name, widgetClass, c, label, init, flags = SWT.BORDER) {
        if (label != null) {
            let txt = new LabelWidget(c, SWT.NONE)
            txt.setText(label)
            GridDataFactory.fillDefaults().align(SWT.END, SWT.CENTER).applyTo(txt)
        }
        let widget = new widgetClass(c, flags)
        if (init != null) init(widget)
        // saving in widgets reference array
        if (name != null) this.widgets[name] = widget
    },

    /**
     * as open() will destroy the widgets on close, saving values to config
     */
    saveInput: function () {

        /** no simpler way to get the selected radio button in a group :-(
         * @param {JavaObject} g - a group control
         * @returns - the selected radio button text
         */
        function getRadioGroupSelectedValue(g) {
            for (let r of g.getChildren()) {
                if (r.getSelection()) {
                    return r.getText()
                }
            }
        }

        this.config.layoutValue = getRadioGroupSelectedValue(this.widgets.grpLayoutValues)
        this.config.topPadding = parseInt(this.widgets.topPadding.getText(), 10)
        this.config.internalPadding = parseInt(this.widgets.internalPadding.getText(), 10)
    },


    open: function() {
        return (this.dialog.open() == 0)  // OK = 0, Cancel = 1, Closed = -1
    },

    // NB: Nashorn specific JS syntax! (like java anonymous function)
    // also not possible to define anything else than inherited method to override. No new method, no property
    dialog: new ConfigDialog(shell) {

        create: function () {
            Java.super(cfgDialog.dialog).create()
            cfgDialog.dialog.setTitle("Treemap layout configuration")
            cfgDialog.dialog.setMessage("Please define all parameters necessary for the visual appearance", IMessageProvider.WARNING);
        },

        createDialogArea: function (parent) {
            var cfg = cfgDialog.config
            let area = Java.super(cfgDialog.dialog).createDialogArea(parent)
            // the area contains an horizontal sep, and a grid layout
            let container = new CompositeWidget(area, SWT.NONE)
            GridDataFactory.swtDefaults().align(SWT.FILL, SWT.BEGINNING).applyTo(container)
            GridLayoutFactory.swtDefaults().numColumns(2).margins(10,10).spacing(10, 5).applyTo(container)

            // layout options
            let group = new GroupWidget(container, SWT.NONE)
            GridDataFactory.swtDefaults().span(2,1).grab(true, false).align(SWT.FILL, SWT.FILL).applyTo(group)
            group.setText('Layout options')
            group.setLayout(new RowLayout (SWT.VERTICAL))
            cfgDialog.widgets.grpLayoutValues = group
            for (let x of cfg.layoutValues) {
                cfgDialog.createWidget(null, ButtonWidget, group, null,
                                       (w) => {
                                           w.setText(x)
                                       }, SWT.RADIO)
            }
            group.getChildren()[0].setSelection(true)

            // Padding options
            group = new GroupWidget(container, SWT.NONE)
          GridDataFactory.swtDefaults().span(2,1).grab(true, false).align(SWT.FILL, SWT.FILL).applyTo(group)
          //GridDataFactory.fillDefaults().align(SWT.END, SWT.BEGINNING).applyTo(group)
          group.setText('Padding Options')
          // group.setLayout(new RowLayout (SWT.VERTICAL))
            GridLayoutFactory.swtDefaults().numColumns(2).equalWidth(true).applyTo(group)
            cfgDialog.createWidget('topPadding', SpinnerWidget, group, "Top padding",
                                   (w) => {
                                       w.setValues(cfg.topPadding, 5, 100, 0, 5, 10)
                                   })
            cfgDialog.createWidget('internalPadding', SpinnerWidget, group, "Internal Padding",
                                   (w) => {
                                       w.setValues(cfg.internalPadding, 5, 100, 0, 5, 10)
                                   })

            return area
        },

        okPressed: function() {
            cfgDialog.saveInput()
            Java.super(cfgDialog.dialog).okPressed()
        }
    }
}


// Test
console.clear()
console.show()

if (cfgDialog.open()) {
    $(selection).filter("element").add($(selection).filter("archimate-diagram-model").children("element")).each(function(e) {
        treemap(e,
                {
                    "layout": cfgDialog.config.layoutValue,
                    "padding": cfgDialog.config.internalPadding,
                    "padding_top": cfgDialog.config.topPadding,
                    "aspect_ratio": 1.8,
                    "debug": false
                });
    });
}

